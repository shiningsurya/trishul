#!/usr/bin/env python
import os
import numpy as np
from tqdm import tqdm
# trishul imports
import trishul.deeputils   as tdu
import trishul.deepmodels  as tdm
import trishul.deeptrainer as tdt
# torch imports
import torch       as t
import torch.nn    as tn
import torch.optim as to


def parse_args ():
    import argparse
    ap = argparse.ArgumentParser(prog='tscae_clf', description='Trishul tool for deep learning tasks.', epilog='Part of Trishul')
    add = ap.add_argument
    # add ('cnn', help='CNN model class.', choices=tdm.MODELS)
    # add ('it', help="Iteration index. defaults to latest.", default=None, type=int)
    # add ('params', help='Hyperparameters YAML file.', )
    add ('--root-dir', help='Data root directory.', default="/home/vlite-master/surya/triggers/", dest='rdir')
    add ('--model-dir', help="Model save directory.", default='/home/vlite-master/surya/triggers/Models/', dest='mdir')
    add ('--ds-dir', help="Dataset directory.", default='/home/vlite-master/surya/trishul/Datasets/', dest='dsir')
    return ap.parse_args ()

if __name__ == "__main__":
    args = parse_args ()
    IIDX = "trainclf"
    TRUES = ["faketrue_btdd.npy","vall_psr_btdd.npy"]
    # FALSES = ["vall_rfi_btdd.npy", "vall_dm150_rfi_btdd.npy","whitenoise_btdd.npy"]
    FALSES = ["vall_rfi_btdd.npy", "vall_dm150_rfi_btdd.npy"]
    DSet = tdu.NpyClfDatasets (TRUES, FALSES, args.dsir,)
    train_l, val_l   = DSet.train_test_split (random_state=42)
    t_DataLoader     = tdu.DataLoader (DSet, sampler=train_l, batch_size=10, pin_memory=True)
    v_DataLoader     = tdu.DataLoader (DSet, sampler=val_l,   batch_size=10, pin_memory=True)
    # cnn
    # CNN  = tdm.Byakugan (333)
    # CNN  = tdm.YomiYomi(idx=466).cuda()
    CNN  = tdm.SoruSoru(idx=110)
    CLF  = tdm.SenbonSakura (idx=11)
    ## load CAE
    if True:
        IFILE = "/home/shining/work/trishul/Models/SoruSoru_vall_110_state.pth"
        tdu.LoadModel (IFILE, CNN)
    ## load
    CNN.eval()
    CLFID= "{0}_{1}_{2}".format(CLF.name, IIDX, CLF.idx)
    LFN  = tn.BCELoss()
    OPM  = to.Adam (CNN.parameters(), lr=1e-3)
    # metrics
    # METS = {'recall':tdu.Recall_score, 'precision':tdu.Precision_score}
    METS   = {}
    training_curve    = tdu.Curve (METS.keys(),epoch=0, type_="training")
    validation_curve  = tdu.Curve (METS.keys(),epoch=0,  type_="validation")
    # train
    num_epochs = 10
    EPC  = np.arange (num_epochs)
    tEPC = tqdm (EPC, desc="Epochs", unit="epochs", total=num_epochs)
    try:
        for i in tEPC:
            # training
            tmet = tdt.AECLFTrainerNoCuda (CNN, CLF, OPM, LFN, t_DataLoader, METS)
            training_curve (tmet)
            # validation
            vmet = tdt.AECLFEvaluatorNoCuda (CNN, CLF, LFN, v_DataLoader, METS)
            validation_curve (vmet)
            # print
            print ("Training   loss (log10)= ", np.log10(np.mean( tmet['loss'] )))
            print ("Validation loss (log10)= ", np.log10(np.mean( vmet['loss'] )))
            # print 
    except KeyboardInterrupt:
        print ("Received keyboard interrupt")
    # save metrics
    curves = [training_curve, validation_curve]
    try:
        tdu.WritePickle (curves, os.path.join(args.mdir, "{0}_curves.pkl".format(CLFID)))
    except:
        print ("[EE] Writing pickle.")
    try:
        tdu.PlotCurve (curves, os.path.join(args.mdir, "{0}_curves.pdf".format(CLFID)))
    except:
        print ("[EE] Plotting learning curves.")
    # dump model
    try:
        tdu.DumpModel (os.path.join (args.mdir, "{0}_state".format(CLFID)), CLF, OPM)
    except:
        print ("[EE] Dumping model")


