#!/usr/bin/env python
import os
import numpy as np
from tqdm import tqdm
# trishul imports
import trishul.deeputils   as tdu
import trishul.deepmodels  as tdm
import trishul.deeptrainer as tdt
# torch imports
import torch       as t
import torch.nn    as tn
import torch.optim as to


def parse_args ():
    import argparse
    ap = argparse.ArgumentParser(prog='tscae', description='Trishul tool for Convolutional Autoencoder tasks.', epilog='Part of Trishul')
    add = ap.add_argument
    # add ('cnn', help='CNN model class.', choices=tdm.MODELS)
    # add ('it', help="Iteration index. defaults to latest.", default=None, type=int)
    # add ('params', help='Hyperparameters YAML file.', )
    add ('--model-dir', help="Model save directory.", default='/home/vlite-master/surya/triggers/Models/', dest='mdir')
    add ('--ds-dir', help="Dataset directory.", default='/home/vlite-master/surya/trishul/Datasets/', dest='dsir')
    return ap.parse_args ()

if __name__ == "__main__":
    args = parse_args ()
    # dataset
    IIDX = "vall"
    NPYFILE = "vall_btdd.npy"
    DSet = tdu.NpyDataset (NPYFILE, tdu.NPYDICT[NPYFILE], args.dsir,)
    train_l, val_l   = DSet.train_test_split (random_state=42)
    t_DataLoader     = tdu.DataLoader (DSet, sampler=train_l, batch_size=100, pin_memory=True)
    v_DataLoader     = tdu.DataLoader (DSet, sampler=val_l, batch_size=100,pin_memory=True)
    # cnn
    # CNN  = tdm.Byakugan (333)
    # CNN  = tdm.VGG11A (466).cuda()
    # CAE  = tdm.GomuGomu (700).cuda()
    CAE  = tdm.BaraBara(idx=710)
    ## load
    if False:
        IFILE = "/home/shining/work/vlite/machine_learnings/gomugomu/GomuGomu_itaaa_100_state.pth"
        tdu.LoadModel (IFILE, CAE)
    ## load
    CAEID= "{0}_{1}_{2}".format(CAE.name, IIDX, CAE.idx)
    LFN  = tn.MSELoss ()
    OPM  = to.Adam (CAE.parameters(), lr=1e-3)
    # metrics
    # METS = {'recall':tdu.Recall_score, 'precision':tdu.Precision_score}
    METS = {}
    training_curve    = tdu.Curve (METS.keys(),epoch=0, type_="training")
    validation_curve  = tdu.Curve (METS.keys(),epoch=0,  type_="validation")
    # train
    num_epochs = 10
    EPC  = np.arange (num_epochs)
    tEPC = tqdm (EPC, desc="Epochs", unit="epochs", total=num_epochs)
    for i in tEPC:
        # training
        tmet = tdt.AETrainerNoCuda (CAE, OPM, LFN, t_DataLoader, METS)
        training_curve (tmet)
        # validation
        vmet = tdt.AEEvaluatorNoCuda (CAE, LFN, v_DataLoader, METS)
        validation_curve (vmet)
        # print
        print ("Training   loss (log10)= ", np.log10(np.mean( tmet['loss'] )))
        print ("Validation loss (log10)= ", np.log10(np.mean( vmet['loss'] )))
    # save metrics
    curves = [training_curve, validation_curve]
    try:
        tdu.WritePickle (curves, os.path.join(args.mdir, "{0}_curves.pkl".format(CAEID)))
    except:
        print ("[EE] Writing pickle.")
    # dump model
    try:
        tdu.DumpModel (os.path.join (args.mdir, "{0}_state".format(CAEID)), CAE, OPM)
    except:
        print ("[EE] Dumping model")


