#!/usr/bin/env python
import os
import numpy as np
from tqdm import tqdm
# trishul imports
import trishul.deeputils   as tdu
import trishul.deepmodels  as tdm
import trishul.deeptrainer as tdt
# torch imports
import torch       as t
import torch.nn    as tn
import torch.optim as to


def parse_args ():
    import argparse
    ap = argparse.ArgumentParser(prog='tscae', description='Trishul tool for Convolutional Autoencoder tasks.', epilog='Part of Trishul')
    add = ap.add_argument
    # add ('cnn', help='CNN model class.', choices=tdm.MODELS)
    # add ('it', help="Iteration index. defaults to latest.", default=None, type=int)
    # add ('params', help='Hyperparameters YAML file.', )
    add ('--model-dir', help="Model save directory.", default='/home/vlite-master/surya/triggers/Models/', dest='mdir')
    add ('--ds-dir', help="Dataset directory.", default='/home/vlite-master/surya/trishul/Datasets/', dest='dsir')
    return ap.parse_args ()

if __name__ == "__main__":
    args = parse_args ()
    # dataset
    IIDX = "vall"
    NPYFILE = "vall_btdd.npy"
    DSet = tdu.NpyDataset (NPYFILE, tdu.NPYDICT[NPYFILE], args.dsir,)
    d_DataLoader     = tdu.DataLoader (DSet, batch_size=1, pin_memory=True, shuffle=False)
    ONPY = np.zeros ((DSet.n, 8), dtype=np.float32)
    OLOS = np.zeros ((DSet.n,), dtype=np.float32)
    # cnn
    # CNN  = tdm.Byakugan (333)
    # CNN  = tdm.VGG11A (466).cuda()
    CAE  = tdm.YareYare(idx=101)
    IFILE = "/home/shining/work/vlite/machine_learnings/yareyare/YareYare_vall_101_state.pth"
    tdu.LoadModel (IFILE, CAE)
    CAE.eval()
    # CAE  = tdm.BaraBara(idx=710)
    LFN  = tn.MSELoss ()
    ## load
    CAEID= "{0}_{1}_{2}".format(CAE.name, IIDX, CAE.idx)
    # loop
    for i,nin in enumerate(tqdm (d_DataLoader, unit='trig', desc='Trigger')):
        in_b        = t.autograd.Variable (nin['payload'])
        nout, code  = CAE (in_b)
        ONPY[i]     = code.detach().numpy()
        ## loss
        loss        = LFN (nout, in_b)
        OLOS[i]     = loss.item()
    # losses
    try:
        np.save(os.path.join(args.mdir, "{0}_losses.pkl".format(CAEID)), OLOS)
    except:
        print ("[EE] Writing losses.")
    # codes
    try:
        np.save(os.path.join(args.mdir, "{0}_codes.pkl".format(CAEID)), ONPY)
    except:
        print ("[EE] Writing codes.")


