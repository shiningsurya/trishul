#!/usr/bin/env python
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
import trishul.dbson as tdb
from scipy.stats import skew, kurtosis
"""
Banded 
Max, mean and std.dev
"""

def parseargs():
    import argparse as arp
    ap = arp.ArgumentParser (prog='tsmms', description='Trishul handy tool for band feature extraction.', epilog='Part of Trishul')
    add = ap.add_argument
    add('dbson', help = 'List of dbsons', nargs='+')
    add("--dir", help='Output directory',dest='dir', default="./")
    add("--twd", help='Time halfwidth. Must be odd.',dest='twd', default=3, type=int)
    add("--dwd", help='DM halfwidth. Must be odd.',dest='dwd', default=3, type=int)
    return ap.parse_args ()

if __name__ == "__main__":
    args = parseargs ()
    for dbs in args.dbson:
        with tdb.DBSON (dbs) as x:
            # data 
            ibt  = np.array(x.bt,dtype=np.float32)
            ndm,nt = ibt.shape
            ## limits
            hdm    = ndm//2
            hnt    = nt//2
            idm    = hdm - args.dwd
            jdm    = hdm + args.dwd + 1
            itt    = hnt - args.twd
            jtt    = hnt + args.twd + 1
            # axes
            dms = np.arange (x.ndm) * x.dmoff
            dms += x.dm1
            times = np.arange (x.nsamps) * x.tsamp
            # data planes
            fdm    = ibt[itt:jtt].copy()
            ftt    = ibt[:,itt:jtt].copy()
            ### normalize
            fdm    -= fdm.mean()
            fdm    /= fdm.std()
            ftt    -= ftt.mean()
            ftt    /= ftt.std()
            ### maxes
            dmm     = np.max (fdm, axis=1)
            ttm     = np.max (ftt, axis=0)
            ### writing
            fn,_ = os.path.splitext (os.path.basename(dbs))
            """
            Max, Mean, and std.dev. of 
            -- band along DM axis
            -- band along time axis
            """
            with open (os.path.join (args.dir, fn+".mms"), 'w') as f:
                f.write ("{},{},".format(x.filename, x.sn))
                f.write ("{},{},{},".format (dmm.max(), dmm.mean(), dmm.std()))
                f.write ("{},{},{}\n".format (ttm.max(), ttm.mean(), ttm.std()))

